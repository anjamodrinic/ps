public FrmAddPersons() throws SQLException {
        initComponents();
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOsobe = new javax.swing.JTable();
        btnAddPerson = new javax.swing.JButton();
        btnRemovePerson = new javax.swing.JButton();
        btnSavePerons = new javax.swing.JButton();

        tableOsobe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableOsobe);

        btnAddPerson.setText("Add person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnRemovePerson.setText("Remove person");
        btnRemovePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePersonActionPerformed(evt);
            }
        });

        btnSavePerons.setText("Save persons");
        btnSavePerons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePeronsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddPerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemovePerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSavePerons)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPerson)
                    .addComponent(btnRemovePerson)
                    .addComponent(btnSavePerons))
                .addContainerGap())
        );
    }// </editor-fold>                        

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        PersonTableModel tm=(PersonTableModel)tableOsobe.getModel();
        tm.addPerson(new Person());
    }                                            

    private void btnRemovePersonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        PersonTableModel tm=(PersonTableModel)tableOsobe.getModel();
        int selected=tableOsobe.getSelectedRow();
        if(selected<0){
            JOptionPane.showMessageDialog(this, "Morate odabrati osobu!");
        }else{
            tm.removePerson(selected);
        }
    }                                               

    private void btnSavePeronsActionPerformed(java.awt.event.ActionEvent evt) {                                              
        DatabaseRepository db=new DatabaseRepository();
        try {
            PersonTableModel tm=(PersonTableModel)tableOsobe.getModel();
            List<Person> persons=tm.getPersons();

            db.connect();
            db.addPersons(persons);
            db.commit();

            JOptionPane.showMessageDialog(this, "Uspesno sacuvane osobe!");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Neuspesno cuvanje osoba!");
            try {
                db.rollback();
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        }finally{
            try {
                db.disconnect();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }                                             


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnRemovePerson;
    private javax.swing.JButton btnSavePerons;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableOsobe;
    // End of variables declaration                   

    private void prepareView() throws SQLException {
        pripremiTabeluOsobe();
    }

    private void pripremiTabeluOsobe() throws SQLException {
        try {
            List<Person> persons=new ArrayList<>();
            PersonTableModel tm=new PersonTableModel(persons, true);
            tableOsobe.setModel(tm);
            
            TableColumn tcGender=tableOsobe.getColumnModel().getColumn(2);
            JComboBox cbGender=new JComboBox(Gender.values());
            tcGender.setCellEditor(new DefaultCellEditor(cbGender));
            
            TableColumn tcCity=tableOsobe.getColumnModel().getColumn(4);
            DatabaseRepository db=new DatabaseRepository();
            db.connect();
            List<City> cities=db.getCities();
            db.disconnect();
            JComboBox cbCity=new JComboBox(cities.toArray());
            cbCity.addItem(new City(26220L, "Kovin"));
            tcCity.setCellEditor(new DefaultCellEditor(cbCity));
            
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom pripreme ekranske forme!\n"+ex.getMessage());
            throw ex;
        }
        
    }
}
